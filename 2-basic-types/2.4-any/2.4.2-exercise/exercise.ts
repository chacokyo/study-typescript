// --------------------------------------------------------------------------
// ✅ TypeScript의 `any` 타입
// --------------------------------------------------------------------------

// 1. `any` 타입으로 변수를 선언하고 문자열 값을 할당하세요.
let hamster: any

// 2. 그 변수를 숫자로 다시 할당하세요.
hamster = 12

// 3. 그 변수를 name 프로퍼티가 "TS"인 객체로 다시 할당하세요.
hamster = {
  name: 'TS',
}
// 4. 매개변수 타입이 `any`인 함수를 만들고, 그 타입과 값을 로그로 출력하세요.
function jisu(value: any) {
  return console.log(typeof value)
}
// 5. 그 함수를 문자열, 숫자, 객체, 배열 등 다양한 타입의 인자로 호출하세요.
jisu('hamster')
jisu(1004)
jisu({ name: 'hamster' })
jisu(['jisu', 'angel'])
// 6. TypeScript에서 `any`를 사용하는 것이 왜 유용할 수도 있고, 동시에 문제가 될 수도 있는지 설명하세요.
// any는 가장 유연한 타입.
// 자바스크립트 프로젝트를 타입스크립트로 마이그레이션 하는 중 발생하는 타입 오류 처리에 유연함.
// 타입 스크립트의 목적은 타입 오류를 잡는 것인데 any는 이를 막음.
